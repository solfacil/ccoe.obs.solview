logging {
  level  = "debug"
  format = "logfmt"
}

tracing {
  // Internal Alloy traces (opcional)
  sampling_fraction = 1
}

// OTLP receiver (apps) -> Tempo (via batch)
otelcol.receiver.otlp "otlp" {
  grpc { endpoint = "0.0.0.0:4317" }
  // http { endpoint = "0.0.0.0:4318" }  // habilite se precisar OTLP/HTTP
  output { traces = [otelcol.processor.batch.default.input] }
}

otelcol.processor.batch "default" {
  output { traces = [otelcol.exporter.otlp.tempo.input] }
}

otelcol.exporter.otlp "tempo" {
  client {
    endpoint = "tempo:4317"
    tls { insecure = true }
  }
}

// Logs Docker -> Loki (descoberta + filtros + pipeline JSON)
loki.source.docker "containers" {
  host    = "unix:///var/run/docker.sock"
  targets = [{ __address__ = "unix:///var/run/docker.sock" }]
  labels  = { job = "containers" }
  forward_to = [loki.write.default.receiver]
}

// Mapeia meta-labels Docker -> labels úteis (service_name, environment, app, container_name)
loki.relabel "labels" {
  forward_to = [loki.process.pipeline.receiver]

  // container_name limpo
  rule {
    action        = "replace"
    source_labels = ["__meta_docker_container_name"]
    target_label  = "container_name"
    regex         = "/(.*)"
    replacement   = "$1"
  }

  // service_name
  rule {
    action        = "replace"
    source_labels = ["__meta_docker_label_solview_service_name"]
    target_label  = "service_name"
  }

  // environment
  rule {
    action        = "replace"
    source_labels = ["__meta_docker_label_solview_environment"]
    target_label  = "environment"
  }

  // app (igual ao service_name)
  rule {
    action        = "replace"
    source_labels = ["__meta_docker_label_solview_service_name"]
    target_label  = "app"
  }
}

// Pipeline: parse JSON do Solview, timestamp, labels estruturadas, saída limpa
loki.process "pipeline" {
  forward_to = [loki.write.default.receiver]

  stage.json {
    expressions = {
      timestamp           = "[\"@timestamp\"]",
      level               = "level",
      message             = "message",
      trace_id            = "labels.trace_id",
      span_id             = "labels.span_id",
      event               = "labels.event",
      service_name        = "service.name",
      service_environment = "service.environment",
    }
  }

  stage.timestamp {
    source = "timestamp"
    format = "RFC3339"
  }

  stage.labels {
    values = {
      service_name = "service_name",
      environment  = "service_environment",
      app          = "app",
      level        = "level",
      trace_id     = "trace_id",
      span_id      = "span_id",
      event        = "event",
    }
  }

  stage.output {
    source = "message"
  }
}

loki.write "default" {
  endpoint { url = "http://loki:3100/loki/api/v1/push" }
}