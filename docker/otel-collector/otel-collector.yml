receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  
  # Prometheus receiver for self-monitoring
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8889']

processors:
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048

  memory_limiter:
    check_interval: 1s
    limit_mib: 512

  resource:
    attributes:
      # ✅ CONFIGURAÇÃO UNIVERSAL - NÃO sobrescrever service.name
      # O service.name deve vir da aplicação via OTEL_SERVICE_NAME
      - key: environment
        value: "development"
        action: upsert
      - key: service.namespace
        value: "solview"
        action: upsert
      - key: deployment.environment
        value: "docker-compose"
        action: upsert
      # ✅ NÃO definir service.name aqui - deixar vir da aplicação
      # ✅ NÃO definir app aqui - deixar vir da aplicação

  # Add Solview-specific attributes
  attributes:
    actions:
      - key: solview.version
        value: "2.0.0"
        action: upsert
      - key: solview.stack
        value: "lgtm"
        action: upsert

exporters:
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: solview
    const_labels:
      environment: development
      collector: otel

  # OTLP/HTTP exporter for logs (to Loki via Grafana Agent or direct)
  otlphttp/loki:
    endpoint: http://loki:3100/otlp

  # Tempo exporter for traces  
  otlp/tempo:
    endpoint: http://tempo:4317
    tls:
      insecure: true

  # Debug exporter for troubleshooting
  debug:
    verbosity: normal
    sampling_initial: 5
    sampling_thereafter: 200

service:
  extensions: []
  
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [otlp/tempo, debug]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [prometheus, debug]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, attributes, batch]
      exporters: [debug]

  telemetry:
    logs:
      level: "info"

